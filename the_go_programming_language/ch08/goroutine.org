#+TITLE: Goroutine

* goroutine

1. goroutine和线程之间再数量上有很大的区别 fixme （9.8节）
2. main函数其实就是一个goroutine，我们把它称作主goroutine.

#+BEGIN_SRC go
  f()
  go f()
#+END_SRC

我们先来看看一个具体的例子

#+BEGIN_SRC go
   func main() {
    go spinner(100 * time.Millisecond)
    const n = 45
    fibN := fib(n) // slow
    fmt.Printf("\rFibonacci(%d) = %d\n", n, fibN)
  }

  func spinner(delay time.Duration) {
    for {
      for _, r := range `-\|/` {
        fmt.Printf("\r%c", r)
        time.Sleep(delay)
      }
    }
  }

  func fib(x int) int {
    if x < 2 {
      return x
    }
    return fib(x-1) + fib(x-2)
  }
#+END_SRC

** 注意

1. main 函数退出的时候，所有goroutine全部暴力退出
2. 没有程序化的方法让一个goroutine来终止另一个goroutine

* 并发时钟服务器

** clock1
#+BEGIN_SRC go
  func main() {
    listener, err := net.Listen("tcp", "localhost:8000")
    if err != nil {
      log.Fatal(err)
    }
    for {
      conn, err := listener.Accept()
      if err != nil {
        log.Print(err) // e.g., connection aborted
        continue
      }
      handleConn(conn) // handle one connection at a time
    }
  }

  func handleConn(c net.Conn) {
    defer c.Close()
    for {
      _, err := io.WriteString(c, time.Now().Format("15:04:05\n"))
      if err != nil {
        return // e.g., client disconnected
      }
      time.Sleep(1 * time.Second)
    }
  }
  //!-
#+END_SRC

当服务器打开后，可以使用
#+BEGIN_SRC sh
  nc localhost 8000
#+END_SRC
连接，但是只能允许1个客户端连接。

** netcat1

#+BEGIN_SRC go
  func main() {
    conn, err := net.Dial("tcp", "localhost:8000")
    if err != nil {
      log.Fatal(err)
    }
    defer conn.Close()
    mustCopy(os.Stdout, conn)
  }
  func mustCopy(dst io.Writer, src io.Reader) {
    if _, err := io.Copy(dst, src); err != nil {
      log.Fatal(err)
    }
  }
#+END_SRC

** clock2

可以接受多个客户端连接

#+BEGIN_SRC go
  func handleConn(c net.Conn) {
    defer c.Close()
    for {
      _, err := io.WriteString(c, time.Now().Format("15:04:05\n"))
      if err != nil {
        return // e.g., client disconnected
      }
      time.Sleep(1 * time.Second)
    }
  }

  func main() {
    listener, err := net.Listen("tcp", "localhost:8000")
    if err != nil {
      log.Fatal(err)
    }
    //!+
    for {
      conn, err := listener.Accept()
      if err != nil {
        log.Print(err) // e.g., connection aborted
        continue
      }
      go handleConn(conn) // handle connections concurrently
    }
  }
#+END_SRC

* 并发回声服务器
** reverb1
#+BEGIN_SRC go
  func echo(c net.Conn, shout string, delay time.Duration) {
    fmt.Fprintln(c, "\t", strings.ToUpper(shout))
    time.Sleep(delay)
    fmt.Fprintln(c, "\t", shout)
    time.Sleep(delay)
    fmt.Fprintln(c, "\t", strings.ToLower(shout))
  }

  func handleConn(c net.Conn) {
    input := bufio.NewScanner(c)
    for input.Scan() {
      echo(c, input.Text(), 1*time.Second)
    }
    // NOTE: ignoring potential errors from input.Err()
    c.Close()
  }

  func main() {
    l, err := net.Listen("tcp", "localhost:8000")
    if err != nil {
      log.Fatal(err)
    }
    for {
      conn, err := l.Accept()
      if err != nil {
        log.Print(err) // e.g., connection aborted
        continue
      }
      go handleConn(conn)
    }
  }
#+END_SRC
注意所有的返回是按顺序的，

#+BEGIN_SRC sh
  some
      SOME
  GOOD
      some
      some
      GOOD
      good
      good
#+END_SRC

** reverb2

#+BEGIN_SRC go
  func echo(c net.Conn, shout string, delay time.Duration) {
    fmt.Fprintln(c, "\t", strings.ToUpper(shout))
    time.Sleep(delay)
    fmt.Fprintln(c, "\t", shout)
    time.Sleep(delay)
    fmt.Fprintln(c, "\t", strings.ToLower(shout))
  }

  func handleConn(c net.Conn) {
    input := bufio.NewScanner(c)
    for input.Scan() {
      go echo(c, input.Text(), 1*time.Second)
    }
    // NOTE: ignoring potential errors from input.Err()
    c.Close()
  }

  func main() {
    l, err := net.Listen("tcp", "localhost:8000")
    if err != nil {
      log.Fatal(err)
    }
    for {
      conn, err := l.Accept()
      if err != nil {
        log.Print(err) // e.g., connection aborted
        continue
      }
      go handleConn(conn)
    }
  }
#+END_SRC

返回是乱序的，因为并发返回

#+BEGIN_SRC sh
  some
     SOME
  good
     GOOD
     some
     good
     some
     good
#+END_SRC

* 通道

1. 用来在 goroutine 之间进行通信用的。
2. 通道是引用类型。
3. 通道类型之间可以比较 $==$, 通道的0值为nil

#+BEGIN_SRC go
  ch := make(chan int)
  ch <- x
  x = <- ch
  <-ch
  close(ch)
#+END_SRC

1. 往一个关闭的通道发送数据，将引发宕机。
2. 从一个关闭的通道获取数据，会不断的获取数据。直到获取完毕所有数据。然后，之后的操作立即返回nil。
3. 重复关闭一个通道也会引发宕机。

#+BEGIN_SRC go
  ch = make(chan int)     // 无缓冲通道
  ch = make(chan int, 0)  // 无缓冲通道
  ch = make(chan init, 3) // 容量为3的通道
#+END_SRC

** 无缓冲通道

1. 无缓冲通道也叫做同步通道。

#+BEGIN_SRC go
  func main() {
    conn, err := net.Dial("tcp", "localhost:8000")
    if err != nil {
      log.Fatal(err)
    }
    done := make(chan struct{})
    go func() {
      io.Copy(os.Stdout, conn) // NOTE: ignoring errors
      log.Println("done")
      done <- struct{}{} // signal the main goroutine
    }()
    mustCopy(conn, os.Stdin)//注意主程序只执行到这一步，就卡住了。
    conn.Close()
    <-done // wait for background goroutine to finish
  }

  func mustCopy(dst io.Writer, src io.Reader) {
    if _, err := io.Copy(dst, src); err != nil {
      log.Fatal(err)
    }
  }
#+END_SRC

等待计算结果

#+BEGIN_SRC go
  package main
  import (
    "fmt"
    "time"
  )
  func main() {
    result := 0
    done := make(chan struct{})
    go func() {
      for i := 1; i < 10; i++ {
        result = i + result
        time.Sleep(1000 * time.Millisecond)
        fmt.Println(".....")
      }
      done <- struct{}{}
    }()
    <-done
    fmt.Println(result)
  }
#+END_SRC

** 管道
*** pipeline1
#+BEGIN_SRC go
  func main() {
    naturals := make(chan int)
    squares := make(chan int)

    // Counter
    go func() {
      for x := 0; ; x++ {
        naturals <- x
      }
    }()

    // Squarer
    go func() {
      for {
        x := <-naturals
        squares <- x * x
      }
    }()

    // Printer (in main goroutine)
    for {
      fmt.Println(<-squares)
    }
  }
#+END_SRC

*** pipeline2
#+BEGIN_SRC go
  func main() {
    naturals := make(chan int)
    squares := make(chan int)

    // Counter
    go func() {
      for x := 0; x < 100; x++ {
        naturals <- x
      }
      close(naturals)
    }()

    // Squarer
    go func() {
      for x := range naturals {
        squares <- x * x
      }
      close(squares)
    }()

    // Printer (in main goroutine)
    for x := range squares {
      fmt.Println(x)
    }
  }
#+END_SRC

1. 关闭每一个通道不是必须的。
2. 通道的关闭是通过是否可以访问来确定是否资源回收。而不是是否关闭

** 单项通道类型

#+BEGIN_SRC go
  func counter(out chan<- int) {
    for x := 0; x < 100; x++ {
      out <- x
    }
    close(out)
  }

  func squarer(out chan<- int, in <-chan int) {
    for v := range in {
      out <- v * v
    }
    close(out)
  }

  func printer(in <-chan int) {
    for v := range in {
      fmt.Println(v)
    }
  }

  func main() {
    naturals := make(chan int)
    squares := make(chan int)

    go counter(naturals)
    go squarer(squares, naturals)
    printer(squares)
  }
#+END_SRC

** 缓冲通道

#+BEGIN_SRC go
  ch := make(chan string, 3)
  fmt.Println(cap(ch)) // 3
  fmt.Println(len(ch)) // 2 当前有多少个元素在里面
#+END_SRC

1. 注意不能把管道当做队列来用。因为使用队列来用少有不甚，会导致程序卡住。

#+BEGIN_SRC go
  func mirroredQuery() string {
    responses := make(chan string, 3)
    go func() {responses <- request("asia.gopl.io")} ()
    go func() {responses <- request("europe.gopl.io")} ()
    go func() {responses <- request("americas.gopl.io")} ()
    return <-responses
  }

  func request(hostname string) (response string) {/* ... */}
#+END_SRC

1. 如果采用无缓冲的chan，那么慢的两个goroutine就会卡卡住。不会被释放掉，因为没有东西来接收这两goroutine的返回。
2. 具体是怎么泄露的？ fixme

* 并行循环

无并行程序写法
#+BEGIN_SRC go
  func makeThumbnails(filenames []string) {
    for _, f := range filenames {
      if _, err := thumbnail.ImageFile(f); err != nil {
        log.Println(err)
      }
    }
  }
#+END_SRC

并行写法
#+BEGIN_SRC go
  func makeThumbnails(filenames []string) {
    for _, f := range filenames {
      go thumbnail.ImageFile(f) // 这个地方存在问题，程序又错误！！！
    }
  }
#+END_SRC

上面的程序有两个地方存在问题。

1. f的问题
2. 程序运行之后瞬间推出。并没有任何函数再等待goroutine运行完毕。

#+BEGIN_SRC go
  func makeThumbnails(filenames []string){
    ch := make(chan struct{})
    for _, f : range filenames {
      go func(f string) {
        thumbnail.ImageFile(f)
        ch <-struct{}{}
      }(f)
    }

    for range filenames {
      <-ch
    }
  }
#+END_SRC

处理返回值

#+BEGIN_SRC go
  func makeThumbnails(filenames []string) error{
    errors := make(chan error)
    for _, f := range filenames {
      _, err := thumbnail.ImageFile(f)
      errors <- err
    }(f)

    for range filenames {
      if err := <-errors; err != nil {
        return err // 这里不正确，goroutine泄露危险
      }
    }

    return nil
  }
#+END_SRC

Q:为什么会造成goroutine协奏，goroutine泄露的原理是什么？

解决方案，是开辟一个和filenames一样长的通道。
#+BEGIN_SRC go
  func makeThumbnails5(filenames []string) (thumbfiles []string, err error) {
    type item struct {
      thumbfile string
      err       error
    }
    ch := make(chan item, len(filenames))
    for _, f := range filenames {
      go func(f string) {
        var it item
        it.thumbfile, it.err = thumbnail.ImageFile(f)
        ch <- it
        }(f)
    }
    for range filenames {
      it := <-ch
      if it.err != nil {
        return nil, it.err
      }
      thumbfiles = append(thumbfiles, it.thumbfile)
    }
    return thumbfiles, nil
  }
#+END_SRC

一个更好的解决方案

#+BEGIN_SRC go
  func makeThumbnails6(filenames <-chan string) int64 {
    sizes := make(chan int64)
    var wg sync.WaitGroup // number of working goroutines
    for f := range filenames {
      wg.Add(1)
      // worker
      go func(f string) {
        defer wg.Done()
        thumb, err := thumbnail.ImageFile(f)
        if err != nil {
          log.Println(err)
          return }
        info, _ := os.Stat(thumb) // OK to ignore error
        sizes <- info.Size()
      }(f)
    }
    // closer
    go func() {
      wg.Wait()
      close(sizes)
    }()
    var total int64
    for size := range sizes {
      total += size
    }
    return total
  }
#+END_SRC

* 并发的Web爬虫

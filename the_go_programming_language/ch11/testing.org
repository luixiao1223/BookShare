#+TITLE: testing

* go测试工具

测试是go的一个子命令
#+BEGIN_SRC sh
  go test ## go run
#+END_SRC

一个go的test文件主要文件名为 "*_test.go", 它可以包含三种函数

1. 以Test为开头的函数
   测试要么，通过不通过。
2. 以Benchmark开头的函数
   会产生一个运行时间统计
3. 以Example开头的函数
   是一个样例展示函数

*go test的机制是去搜索 "*_test.go"的文件，并用一个临时main函数包裹它并运行里面测试函数。*

* 测试函数

** 测试函数
先来看看简单的示例。

注意：测试函数必须以Test开始

#+BEGIN_SRC go
  func TestName(t *testing.T) { // ...
  }
#+END_SRC

先来看个例子，回文的例子word.go 

#+BEGIN_SRC go
  package word
  func IsPalindrome(s string) bool {
    for i := range s {
      if s[i] != s[len(s)-1-i] {
        return false
      }
    }
    return true
  }
#+END_SRC

我们如何来测试这个回文函数？，创建一个word_test.go 

#+BEGIN_SRC go
  package word
  import "testing"
  func TestPalindrome(t *testing.T) {
    if !IsPalindrome("detartrated") {
      t.Error(`IsPalindrome("detartrated") = false`)
    }
    if !IsPalindrome("kayak") {
      t.Error(`IsPalindrome("kayak") = false`)
    } }
  func TestNonPalindrome(t *testing.T) {
    if IsPalindrome("palindrome") {
      t.Error(`IsPalindrome("palindrome") = true`)
    }
  }
#+END_SRC

如果正确会是如下
#+BEGIN_SRC sh
  $ go test
  ok   gopl.io/ch11/word1  0.008s
#+END_SRC

错误是如下
#+BEGIN_SRC go
  $ go test
  --- FAIL: TestFrenchPalindrome (0.00s)
  word_test.go:28: IsPalindrome("été") = false
  --- FAIL: TestCanalPalindrome (0.00s)
  word_test.go:35: IsPalindrome("A man, a plan, a canal: Panama") = false
  FAIL
  FAIL    gopl.io/ch11/word1  0.014s
#+END_SRC

可以输出更为详细的信息(verbose)

#+BEGIN_SRC sh
  $ go test -v
#+END_SRC

用正则表达式运行其中一部分函数

#+BEGIN_SRC sh
  $ go test -v -run="French|Canal"
#+END_SRC

把测试用例放到一个表里面挨个测试

#+BEGIN_SRC go
  func TestIsPalindrome(t *testing.T) {
    var tests = []struct {
      input string
      want bool
    }{
      {"", true},
      {"a", true},
      {"aa", true},
      {"ab", false},
      {"kayak", true},
      {"detartrated", true},
      {"A man, a plan, a canal: Panama", true},
      {"Evil I did dwell; lewd did I live.", true},
      {"Able was I ere I saw Elba", true},
      {"été", true},
      {"Et se resservir, ivresse reste.", true},
      {"palindrome", false}, // non-palindrome
      {"desserts", false},   // semi-palindrome
    }
    for _, test := range tests {
      if got := IsPalindrome(test.input); got != test.want {
        t.Errorf("IsPalindrome(%q) = %v", test.input, got)
      }
    }
  }
#+END_SRC

注意：

1. 如果测试t.Errorf并不会引发panic所以如果你想中断，自己写t.Fatalf来做。
2. 测试t.Errorf应尽量输出有用的信息

** 随机测试

随机函数要注意保留该有的随机种子。方便问题复现

*** 用一个更为清晰简单但是正确的方法实现功能

*** 写一个函数还产生测试数据

gen->[(test_1,result_1),(test_2,result_2],(test_3, result_3),...,(test_n,result_n))

#+BEGIN_SRC go
  //!+random
  // randomPalindrome returns a palindrome whose length and contents
  // are derived from the pseudo-random number generator rng.
  func randomPalindrome(rng *rand.Rand) string {
    n := rng.Intn(25) // random length up to 24
    runes := make([]rune, n)
    for i := 0; i < (n+1)/2; i++ {
      r := rune(rng.Intn(0x1000)) // random rune up to '\u0999'
      runes[i] = r
      runes[n-1-i] = r
    }
    return string(runes)
  }

  func TestRandomPalindromes(t *testing.T) {
    // Initialize a pseudo-random number generator.
    seed := time.Now().UTC().UnixNano()
    t.Logf("Random seed: %d", seed)
    rng := rand.New(rand.NewSource(seed))

    for i := 0; i < 1000; i++ {
      p := randomPalindrome(rng)
      if !IsPalindrome(p) {
        t.Errorf("IsPalindrome(%q) = false", p)
      }
    }
  }
#+END_SRC

** 测试命令
测试带命令行的程序

*** 命令行函数
#+BEGIN_SRC go
  var (
    n = flag.Bool("n", false, "omit trailing newline")
    s = flag.String("s", " ", "separator")
  )

  var out io.Writer = os.Stdout // modified during testing

  func main() {
    flag.Parse()
    if err := echo(!*n, *s, flag.Args()); err != nil {
      fmt.Fprintf(os.Stderr, "echo: %v\n", err)
      os.Exit(1)
    }
  }

  func echo(newline bool, sep string, args []string) error {
    fmt.Fprint(out, strings.Join(args, sep))
    if newline {
      fmt.Fprintln(out)
    }
    return nil
  }
#+END_SRC

如何测试这个函数？

#+BEGIN_SRC sh
>> go run echo.go -n=false -s="'" some some some
>> some'some'some
#+END_SRC


*** 测试代码
#+BEGIN_SRC go
  func TestEcho(t *testing.T) {
    var tests = []struct {
      newline bool
      sep     string
      args    []string
      want    string
    }{
      {true, "", []string{}, "\n"},
      {false, "", []string{}, ""},
      {true, "\t", []string{"one", "two", "three"}, "one\ttwo\tthree\n"},
      {true, ",", []string{"a", "b", "c"}, "a,b,c\n"},
      {false, ":", []string{"1", "2", "3"}, "1:2:3"},
    }

    for _, test := range tests {
      descr := fmt.Sprintf("echo(%v, %q, %q)",
        test.newline, test.sep, test.args)

      out = new(bytes.Buffer) // captured output 这里修改了包体变量out原本为stdout现在为一个buffer
      if err := echo(test.newline, test.sep, test.args); err != nil {
        t.Errorf("%s failed: %v", descr, err)
        continue
      }
      got := out.(*bytes.Buffer).String()
      if got != test.want {
        t.Errorf("%s = %q, want %q", descr, got, test.want)
      }
    }
  }
#+END_SRC

NOTE:

1. 在测试的代码里面不要调用 log.Fatal 或者 os.Exit，因为这两个调用会阻止跟踪的过程，这两个函数的调用可以认为是main函数的特权 。

** 白盒测试

1. 回文测试是黑盒测试
2. echo测试是白盒测试（因为我们修改echo的变量out，所以实际上我们是知道echo程序的代码结构的）

*** 邮件空间预警

#+BEGIN_SRC go
  var usage = make(map[string]int64)

  func bytesInUse(username string) int64 { return usage[username] }

  // Email sender configuration.
  // NOTE: never put passwords in source code!
  const sender = "notifications@example.com"
  const password = "correcthorsebatterystaple"
  const hostname = "smtp.example.com"

  const template = `Warning: you are using %d bytes of storage,
  %d%% of your quota.`

  func CheckQuota(username string) {
    used := bytesInUse(username)
    const quota = 1000000000 // 1GB
    percent := 100 * used / quota
    if percent < 90 {
      return // OK
    }
    msg := fmt.Sprintf(template, used, percent)
    auth := smtp.PlainAuth("", sender, password, hostname)
    err := smtp.SendMail(hostname+":587", auth, sender,
      []string{username}, []byte(msg))
    if err != nil {
      log.Printf("smtp.SendMail(%s) failed: %s", username, err)
    }
  }

#+END_SRC

函数功能：当用户的使用空间炒股90percent的时候，发送一封邮件给用户。

为了测试这个功能是否正确。我们改变源码。把notifyUser抽象出来做一个发送邮件的函数

#+BEGIN_SRC go
  var usage = make(map[string]int64)

  func bytesInUse(username string) int64 { return usage[username] }

  // E-mail sender configuration.
  // NOTE: never put passwords in source code!
  const sender = "notifications@example.com"
  const password = "correcthorsebatterystaple"
  const hostname = "smtp.example.com"

  const template = `Warning: you are using %d bytes of storage,
  %d%% of your quota.`

  //!+factored
  var notifyUser = func(username, msg string) {
    auth := smtp.PlainAuth("", sender, password, hostname)
    err := smtp.SendMail(hostname+":587", auth, sender,
      []string{username}, []byte(msg))
    if err != nil {
      log.Printf("smtp.SendMail(%s) failed: %s", username, err)
    }
  }

  func CheckQuota(username string) {
    used := bytesInUse(username)
    const quota = 1000000000 // 1GB
    percent := 100 * used / quota
    if percent < 90 {
      return // OK
    }
    msg := fmt.Sprintf(template, used, percent)
    notifyUser(username, msg)
  }
#+END_SRC

测试90功能是否正确，替换掉原来的notifyUser，不做实际发送操作。

#+BEGIN_SRC go
  func TestCheckQuotaNotifiesUser(t *testing.T) {
    var notifiedUser, notifiedMsg string
    notifyUser = func(user, msg string) {
      notifiedUser, notifiedMsg = user, msg
    }

    const user = "joe@example.org"
    usage[user] = 980000000 // simulate a 980MB-used condition

    CheckQuota(user)
    if notifiedUser == "" && notifiedMsg == "" {
      t.Fatalf("notifyUser not called")
    }
    if notifiedUser != user {
      t.Errorf("wrong user (%s) notified, want %s",
        notifiedUser, user)
    }
    const wantSubstring = "98% of your quota"
    if !strings.Contains(notifiedMsg, wantSubstring) {
      t.Errorf("unexpected notification message <<%s>>, "+
        "want substring %q", notifiedMsg, wantSubstring)
    }
  }

  //!-test
#+END_SRC

恢复现场

#+BEGIN_SRC go
  func TestCheckQuotaNotifiesUser(t *testing.T) {
    // Save and restore original notifyUser.
    saved := notifyUser
    defer func() { notifyUser = saved }()

    // Install the test's fake notifyUser.
    var notifiedUser, notifiedMsg string
    notifyUser = func(user, msg string) {
      notifiedUser, notifiedMsg = user, msg
    }
    // ...rest of test...
  }
#+END_SRC

*** 总结一下白盒测试的过程
1. 替换掉原本的函数
2. 测试
3. 回复现场

** 外部测试包

[[./xunhuan.png]]

*** 包内测试
和代码写相同的包名

*** 包外测试

比如写

#+BEGIN_SRC go
  package url_test //和url不是一个包，但是可以引入url和http包来测试url包
#+END_SRC

*** 如何判断一个包的文件种类

**** 一般文件

#+BEGIN_SRC sh
$ go list -f={{.GoFiles}} fmt
[doc.go format.go print.go scan.go]
#+END_SRC

**** 包内测试文件

#+BEGIN_SRC sh
$ go list -f={{.TestGoFiles}} fmt
[export_test.go]
#+END_SRC

**** 包外测试

#+BEGIN_SRC sh
$ go list -f={{.XTestGoFiles}} fmt
[fmt_test.go scan_test.go stringer_test.go]
#+END_SRC

*** 如何让包外测试访问到包内的变量？

专门写一个export_test.go来暴露包内测试的变量。这样外部测试包就可以访问包内的变量了。

** 编写有效测试
1. go的测试非常简单，go的逻辑是，让写代码的人来维护代码。所以代码和测试代码差不多。
2. 不要在测试里面panic，这样是无效的测试。因为没有为维护者提供信息。

** 避免脆弱测试
测试如果不稳定，那么程序编写人员会非常难受。
* 覆盖率
#+BEGIN_SRC sh
go test -v -run=Coverage gopl.io/ch7/eval
go test -run=Coverage -coverprofile=c.out gopl.io/ch7/eval
-covermode=count ##可以显示代码被执行的次数
#+END_SRC

覆盖率不是总会百分之100执行，比如有的代码可能永远不会执行到

* benchmark函数
1. 函数名要以Benchmark开头
2. *testing.T作为函数参数

#+BEGIN_SRC go
  import "testing"
  func BenchmarkIsPalindrome(b *testing.B) {
    for i := 0; i < b.N; i++ {
      IsPalindrome("A man, a plan, a canal: Panama")
    }
  }
#+END_SRC

#+BEGIN_SRC sh
go test -bench=.
go test -bench=. -benchmem ##可以查看内存情况。
#+END_SRC

最后会产生报告，其中N是测试命令自己会根据程序运行情况调整大小的。最后可以从报告中看出来大小。

* 性能剖析

1. 不要过早优化。
2. 如何优化关键代码？使用工具剖析，不要使用靠自己的直觉。因为关键代码很有可能和你的直觉不一样。

** 三中性能剖析工具

#+BEGIN_SRC sh
 $ go test -cpuprofile=cpu.out     ## cpu
 $ go test -blockprofile=block.out ## 阻塞
 $ go test -memprofile=mem.out     ## 内存
#+END_SRC

** 运行时内存剖析

1. 长时间运行的程序分析，无法如上面那样仅仅启动分析就行。
2. 可以使用runtime API来启动

** 性能剖析工具

如果运行时产生了数据，那么就可以用工具来分析

#+BEGIN_SRC sh
go tool pprof
#+END_SRC

更过的关于性能剖析的方法，请参考阅读Profiling Go Programs【博客】

* Example函数

#+BEGIN_SRC go
  func ExampleIsPalindrome() {
    fmt.Println(IsPalindrome("A man, a plan, a canal: Panama"))
    fmt.Println(IsPalindrome("palindrome"))
    // Output:
    // true
    // false
  }

#+END_SRC

1. 示例作用
2. 如果包含Output测试函数回去运行它，并检测输出是否一致。
3. 展示在web-based的应用中。



#+TITLE: chapter01-chapter02

* CH01
Andrew NG:机器学习落地还要靠监督性学习
** 人工智能，机器学习和深度学习

深度学习 $\subset$ 机器学习 $\subset$ 人工智能 

1. 最初的人工智能的野心

   建立知识图库，然后根据知识图库进行推断。 WordNet

2. 基于特征的机器学习
   
   + 通过人工提取的特征进行推断。比如逻辑回归，支持向量机。比如，分类水果的支持向量机，需要靠人类的知识提取特征，比如颜色，形状数据等。

   + 特征提取的好坏，会直接影响分类结果。比如分类男女的问题。

     - 提取特征头发长短来分类
     - 根据染色体特征(xy,xx)来分类。

   + 人工提取特征的缺点

     - 昂贵需要专家技术人员
     - 特征不一定好

3. 深度学习，可以自己提取特征。也就是自己根据简单的特征逐步抽象出复杂的特征。


#+DOWNLOADED: /var/folders/0d/0t0_5l6x3qb7zsxvhhlc8f2c0000gn/T/screenshot.png @ 2019-08-07 20:32:00
[[file:CH01/screenshot_2019-08-07_20-32-00.png]]

** 深度学习的发展历程   

1. 感知机模型，只能做线性分类。
2. 深度学习，反向传导。刚开始也不受待见。因为计算力和数据不够。1998年还输给支持向量机。
3. 2012年开始爆发深度学习的威力。

** 应用领域

1. 图像识别
2. 语音识别
3. 自然语言处理。
4. 人机博弈

** 有意思的库

1. 语料库 
   WordNet,ConceptNet,FrameNet

2. 单词向量开源库
   GloVe

3. 情感分析
   Sentiment Treebank

* CH02
** TensorFlow 主要依赖的包

*** Protocol Buffer 

处理结构数据的工具。类似的工具XML，JSON.

#+BEGIN_SRC js
  message user{
    optional string name=1;
    required int32 id=2;
    repeated string email=3;
  }
#+END_SRC

*** Bazel

就是一个编译工具，类似make

#+BEGIN_SRC sh
  BUILD
  hello_lib.py
  hello_main.py
  WORKSPACE // NULL
#+END_SRC

其中hello_lib.py
#+BEGIN_SRC python
  def print_hello_world():
      print("Hello World")
#+END_SRC

hello_main.py
#+BEGIN_SRC python
  import hello_lib
  hello_lib.print_hello_world()
#+END_SRC

BUILD

#+BEGIN_SRC python
  py_library{
      name = "hello_lib",
      srcs = {
          "hello_lib.py",
      }
  }

  py_binary{
      name = "hello_main",
      srcs = {
          "hello_main.py",
      },
      deps = {
          ":hello_lib",
      }
  }
#+END_SRC

#+BEGIN_SRC sh
  bazel build:hello_main
#+END_SRC

** TensorFlow 安装

*** Docker安装

CPU版
#+BEGIN_SRC sh
  docker run -it tensorflow/tensorflow:l.4.0
#+END_SRC

先安装nvidia-docker
GPU版
#+BEGIN_SRC sh
  nvidia-docker run -it tensorflow/tensorflow:l.4.0-gpu
#+END_SRC

*** pip

#+BEGIN_SRC sh
  pip install tensorflow
#+END_SRC

** TensorFlow 测试样例

#+BEGIN_SRC python
  import tensorflow as tf

  a = tf.constant([1,2],name="a")
  b = tf.constant([2,3],name="b")

  result = a + b

  sess = tf.compat.v1.Session() ## 兼容旧版本
  print(sess.run(result)) ## 输出结果
#+END_SRC





